use clap::Parser;
use prove_exploit::commands::example::ExampleCmd;
use prove_exploit::commands::exploit::ExploitCmd;
use std::str::FromStr;

#[derive(Parser)]
#[command(version, about)]
pub enum Cli {
    #[command()]
    Example(ExampleCmd),
    #[command()]
    Exploit(ExploitCmd),
}

#[tokio::main]
async fn main() -> eyre::Result<()> {
    // Set up the logger
    setup();

    let args = Cli::parse();
    match args {
        Cli::Example(example) => example.run().await?,
        Cli::Exploit(exploit) => exploit.run().await?,
    };

    Ok(())
}

/// Setup the tracing subscriber
fn setup() {
    let filter = tracing_subscriber::EnvFilter::try_from_default_env().unwrap_or_else(|_| {
        tracing_subscriber::EnvFilter::from_str("helpers=info,prove_exploit=info")
            .expect("failed to parse filter")
    });
    tracing_subscriber::FmtSubscriber::builder()
        .with_env_filter(filter)
        .try_init()
        .expect("Failed to initialize the logger");
}
