use crate::host::ExecutionHost;
use eyre::eyre;
use revm_interpreter::primitives::{Bytecode, Bytes, CancunSpec, Env};
use revm_interpreter::{
    Contract, InstructionResult, Interpreter, InterpreterAction, EMPTY_SHARED_MEMORY,
};

/// Initializes an interpreter with the given environment and contract bytecode.
pub fn init_interpreter(env: &Env, bytecode: Bytes) -> Interpreter {
    let bytecode = Bytecode::LegacyRaw(bytecode);
    let bytecode_hash = bytecode.hash_slow();

    let contract = Contract::new_env(env, bytecode, Some(bytecode_hash));

    Interpreter::new(contract, u64::MAX, false)
}

/// Runs the provided interpreter with the given environment and storage. Returns the host
/// after execution of the interpreter.
pub fn run_interpreter_with_env(
    mut host: ExecutionHost,
    interpreter: &mut Interpreter,
) -> eyre::Result<InstructionResult> {
    let instruction_table =
        revm_interpreter::opcode::make_instruction_table::<ExecutionHost, CancunSpec>();

    match interpreter.run(EMPTY_SHARED_MEMORY, &instruction_table, &mut host) {
        InterpreterAction::Return { result, .. } => Ok(result.result),
        _ => Err(eyre!("Interpreter did not return a result")),
    }
}
