use revm_interpreter::primitives::{Address, Bytes, TxKind, U256};
use serde::{Deserialize, Serialize};

pub mod db;
pub mod interpreter;

/// This structure represents the environment for
/// the transaction. It is used in place of
/// [`revm_interpreter::primitives::TxEnv`] due
/// to the field `optimism` being on by default
/// due to the import of the `anvil` crate. The
/// `optimism` field uses `serde::flatten` and as
/// such cannot be serialized by `bincode`.
#[derive(Serialize, Deserialize, Default)]
pub struct TxEnv {
    /// Caller aka Author aka transaction signer.
    pub caller: Address,
    /// The gas limit of the transaction.
    pub gas_limit: u64,
    /// The gas price of the transaction.
    pub gas_price: U256,
    /// The destination of the transaction.
    pub transact_to: TxKind,
    /// The value sent to `transact_to`.
    pub value: U256,
    /// The data of the transaction.
    pub data: Bytes,
    /// The nonce of the transaction.
    pub nonce: Option<u64>,
    /// The chain ID of the transaction. If set to `None`, no checks are performed.
    pub chain_id: Option<u64>,
}

impl From<TxEnv> for revm_interpreter::primitives::TxEnv {
    fn from(tx_env: TxEnv) -> Self {
        revm_interpreter::primitives::TxEnv {
            caller: tx_env.caller,
            gas_limit: tx_env.gas_limit,
            gas_price: tx_env.gas_price,
            transact_to: tx_env.transact_to,
            value: tx_env.value,
            data: tx_env.data,
            nonce: tx_env.nonce,
            chain_id: tx_env.chain_id,
            ..Default::default()
        }
    }
}
