use alloy::primitives::TxKind;
use exploit_program::host::ExecutionHost;
use exploit_program::interpreter::{init_interpreter, run_interpreter};
use revm_interpreter::primitives::{Address, BlockEnv, Bytes, CfgEnv, Env, TxEnv, U256};
use std::str::FromStr;

#[test]
fn test_counter_call() {
    // Prepare env
    let counter_address = Address::from_str("0x353bbe46d23fa5DcCdc6E95574375DdA23903a7a").unwrap();
    let caller = Address::from_str("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266").unwrap();
    let chain_id = 12;

    let env = Env {
        tx: TxEnv {
            caller,
            chain_id: Some(chain_id),
            gas_limit: 1_000_000,
            transact_to: TxKind::Call(counter_address),
            data: Bytes::from_str("371303c0").unwrap(),
            ..Default::default()
        },
        cfg: CfgEnv::default().with_chain_id(chain_id),
        block: BlockEnv::default(),
    };

    // Start host
    let bytecode = Bytes::from_str("608060405234801561001057600080fd5b506101a7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063371303c01461004657806361bc221a14610050578063d826f88f1461006e575b600080fd5b61004e610078565b005b6100586100a9565b60405161006591906100c7565b60405180910390f35b6100766100af565b005b600160008082825461008a91906100e2565b925050819055506000805490506001816100a491906100e2565b905050565b60005481565b60008081905550565b6100c181610138565b82525050565b60006020820190506100dc60008301846100b8565b92915050565b60006100ed82610138565b91506100f883610138565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561012d5761012c610142565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212205d6fa7e6ab815337db894cd09df5330d06e6446759d33b5e1161d8fdf94a03fb64736f6c63430008070033").unwrap();
    let host = ExecutionHost {
        env,
        balance: [(caller, U256::MAX)].into_iter().collect(),
        code: [(counter_address, bytecode.clone())].into_iter().collect(),
        ..Default::default()
    };

    // Start interpreter
    let mut interpreter = init_interpreter(&host.env, bytecode);

    // Run interpreter
    let host = run_interpreter(host, &mut interpreter).unwrap();

    dbg!(host);
}
