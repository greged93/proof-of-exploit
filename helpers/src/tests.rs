use alloy::primitives::TxKind;
use exploit_program::host::ExecutionHost;
use exploit_program::interpreter::{init_interpreter, run_interpreter};
use revm_interpreter::primitives::{Address, BlockEnv, Bytes, CfgEnv, Env, TxEnv, U256};
use std::str::FromStr;

#[test]
fn test_counter_call() {
    // Prepare env
    let counter_address = Address::from_str("0x353bbe46d23fa5DcCdc6E95574375DdA23903a7a").unwrap();
    let caller = Address::from_str("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266").unwrap();
    let chain_id = 12;

    let env = Env {
        tx: TxEnv {
            caller,
            chain_id: Some(chain_id),
            gas_limit: 1_000_000,
            transact_to: TxKind::Call(counter_address),
            data: Bytes::from_str("0x371303c0").unwrap(),
            value: U256::ZERO,
            ..Default::default()
        },
        cfg: CfgEnv::default().with_chain_id(chain_id),
        block: BlockEnv::default(),
    };

    // Start host
    let bytecode = Bytes::from_str("608060405234801561001057600080fd5b50600436106100935760003560e01c80637c507cbd116100665780637c507cbd146100e3578063b3bcfa82146100eb578063d826f88f146100f3578063e86e0b2c146100fc578063f0707ea91461010457600080fd5b806306661abd14610098578063371303c0146100b35780634d629c4b146100bd5780637156699f146100d0575b600080fd5b6100a160005481565b60405190815260200160405180910390f35b6100bb610113565b005b6100bb6100cb366004610212565b61012c565b6100bb6100de366004610212565b610157565b6100bb610185565b6100bb61019b565b6100bb60008055565b6100bb6101ad565b6100bb60008054600019019055565b60016000808282546101259190610241565b9091555050565b600080555b8060005410156101545760008054908061014a8361025a565b9190505550610131565b50565b60008080555b81811015610181576000805490806101748361025a565b909155505060010161015d565b5050565b60008054908061019483610273565b9190505550565b6001600080828254610125919061028a565b600080541161019b5760405162461bcd60e51b815260206004820152602760248201527f636f756e742073686f756c64206265207374726963746c7920677265617465726044820152660207468616e20360cc1b606482015260840160405180910390fd5b60006020828403121561022457600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156102545761025461022b565b92915050565b60006001820161026c5761026c61022b565b5060010190565b6000816102825761028261022b565b506000190190565b818103818111156102545761025461022b56fea264697066735822122059ce034209c35577311768b5a8430776ec27e0ebe2a1e8a5bebdd426862472ca64736f6c63430008190033").unwrap();
    let host = ExecutionHost {
        env,
        balance: [(caller, U256::MAX)].into_iter().collect(),
        code: [(counter_address, bytecode.clone())].into_iter().collect(),
        ..Default::default()
    };

    // Start interpreter
    let mut interpreter = init_interpreter(&host.env, bytecode);

    // Run interpreter
    let host = run_interpreter(host, &mut interpreter).unwrap();

    assert_eq!(
        host.storage.get(&(counter_address, U256::ZERO)).unwrap(),
        &U256::from(1)
    );
}
